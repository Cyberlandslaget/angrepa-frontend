import LoggingDisplay from 'components/LoggingDisplay';
import { useAtom, useAtomValue } from 'jotai';
import { useEffect, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import {
  executionLogAtom,
  exploitsAtom,
  scoreboardDataAtom,
  flagLogAtom,
} from 'utils/atoms';
import {
  CONFIG,
  DUMMY_EXPLOIT_LOG,
  DUMMY_FLAGSUBMISSION_LOG,
  FLAG_STATUS,
} from 'utils/constants';
import EditorComponent from '@monaco-editor/react';
import { File } from 'utils/types';
import { useSnackbar } from 'notistack';
import parseTar from 'utils/tar/parseTar';

function tryParseJSONObject(jsonString: string) {
  try {
    const o: unknown = JSON.parse(jsonString);
    if (o && typeof o === 'object') {
      return o;
    }
  } catch (e) {}
  return false;
}
function Exploits() {
  const navigate = useNavigate(); // This line enables component re-render on navigation
  const [view, setView] = useState<'logs' | 'configuration' | 'edit'>('logs');
  const flagLog = useAtomValue(flagLogAtom);
  const executionLog = useAtomValue(executionLogAtom);
  const scoreboardData = useAtomValue(scoreboardDataAtom);
  const [exploits, _setExploits] = useAtom(exploitsAtom);
  const [stringConfig, setStringConfig] = useState('{}');
  const { enqueueSnackbar } = useSnackbar();

  const exploitId = location.hash.substring(1);
  const exploit = exploits?.find((exploit) => exploit.id === exploitId);
  const configuration: { service: string; blacklist: string[] } =
    tryParseJSONObject(stringConfig.trim() || '{}')
      ? JSON.parse(stringConfig.trim() || '{}')
      : {};

  const startExploit = () => {
    fetch(`${CONFIG.MGMT_SERVER_URL}/api/start/${exploitId}`)
      .then((res) => {
        console.log(res);
        enqueueSnackbar(
          `Successfully started the exploit with id ${exploitId}`,
          {
            variant: 'success',
            autoHideDuration: 5000,
          }
        );
      })
      .catch((err) => {
        console.log(err);
        enqueueSnackbar(
          `Got this error from the server when trying to start the exploit: ${err}`,
          {
            variant: 'error',
            autoHideDuration: 5000,
          }
        );
      });
  };
  const stopExploit = () => {
    fetch(`${CONFIG.MGMT_SERVER_URL}/api/stop/${exploitId}`)
      .then((res) => {
        console.log(res);
        enqueueSnackbar(
          `Successfully stopped the exploit with id ${exploitId}`,
          {
            variant: 'success',
            autoHideDuration: 5000,
          }
        );
      })
      .catch((err) => {
        console.log(err);
        enqueueSnackbar(
          `Got this error from the server when trying to stop the exploit: ${err}`,
          {
            variant: 'error',
            autoHideDuration: 5000,
          }
        );
      });
  };

  const updateConfiguration = () => {
    fetch(`${CONFIG.MGMT_SERVER_URL}/api/update_config/${exploitId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(configuration),
    })
      .then((res) => console.log(res))
      .catch((err) => console.log(err));
  };

  const onChange = (value: string | undefined, _event: unknown) => {
    if (!value) return;
    setStringConfig(value);
  };

  const textEncoder = new TextEncoder();
  const editAndResubmit = async () => {
    const res = await fetch(
      `${CONFIG.MGMT_SERVER_URL}/api/exploit/${exploitId}`
    );
    const data: { tar: string; config: string } = await res.json();
    let files: File[] = [
      {
        name: 'config.json',
        data: textEncoder.encode(JSON.stringify(configuration, null, 2)),
      },
    ];
    files = files.concat(
      await parseTar(
        new Uint8Array(
          data?.tar
            ?.slice(2)
            ?.match(/../g)
            ?.map((h) => parseInt(h, 16))
        ).buffer
      )
    );
    console.log(files);
    navigate('/exploits/new', { state: { files: files } });
  };

  useEffect(() => {
    if (!exploit) return;
    setStringConfig(
      JSON.stringify(
        { service: exploit.attack_target, blacklist: exploit.blacklist },
        null,
        2
      )
    );
  }, [exploit]);

  return (
    <main className="w-full h-full grid [grid-template-columns:20%_1fr] gap-3">
      <div className="tertiaryColor grid [grid-template-rows:3rem_1fr] w-full h-full p-2 rounded-md overflow-auto gap-3">
        <div className="p-2 [background:rgba(255,255,255,0.05)] rounded-md flex justify-between ">
          <h2 className="text-lg">Exploits</h2>

          <Link
            className="primaryColor p-1 px-3 rounded-sm transition-all hover:!bg-purple-500"
            to={'./new'}
          >
            Add new exploit
          </Link>
        </div>

        <div className="h-[calc(100vh-9.5rem)] flex flex-col gap-3 p-2 [background:rgba(255,255,255,0.05)] overflow-auto">
          {exploits !== null ? (
            exploits.map((exploit) => (
              <Link
                key={exploit.id}
                className={`relative flex justify-between bg-purple-700 p-3 rounded-sm text-sm transition-all hover:!bg-purple-500`}
                to={'#' + exploit.id}
              >
                {exploit.id}
                <div
                  className={`absolute rounded-full right-3 top-1/2 -translate-y-1/2 w-2 h-2 ${
                    exploit.running ? 'bg-green-400' : 'bg-red-400'
                  }`}
                ></div>
              </Link>
            ))
          ) : (
            <></>
          )}
        </div>
      </div>

      <div className="tertiaryColor grid [grid-template-rows:3rem_1fr] w-full h-[calc(100vh-5rem)] p-2 rounded-md overflow-auto gap-3">
        {exploit && (
          <>
            <div className="flex gap-3 justify-between items-end [background:rgba(255,255,255,0.05)] w-full h-full p-2 rounded-md overflow-auto">
              <div className="flex gap-3 h-full">
                <button
                  className="primaryColor h-full w-36 p-1 px-3 rounded-sm transition-all hover:!bg-purple-500"
                  onClick={() => startExploit()}
                >
                  Start
                </button>
                <button
                  className="primaryColor h-full w-36 p-1 px-3 rounded-sm transition-all hover:!bg-purple-500"
                  onClick={() => stopExploit()}
                >
                  Stop
                </button>
                <h2 className="flex items-center text-lg">#{exploit.id}</h2>
              </div>

              <div className="flex gap-3">
                <button
                  className={`primaryColor p-1 px-3 rounded-sm transition-all hover:!bg-purple-500 ${
                    view === 'logs' ? '!bg-indigo-600 brightness-110' : ''
                  }`}
                  onClick={() => setView('logs')}
                >
                  View logs
                </button>
                <button
                  className={`primaryColor p-1 px-3 rounded-sm transition-all hover:!bg-purple-500 ${
                    view === 'configuration'
                      ? '!bg-indigo-600 brightness-110'
                      : ''
                  }`}
                  onClick={() => setView('configuration')}
                >
                  Configuration
                </button>
                <button
                  className={`primaryColor p-1 px-3 rounded-sm transition-all hover:!bg-purple-500 ${
                    view === 'edit' ? '!bg-indigo-600 brightness-110' : ''
                  }`}
                  onClick={editAndResubmit}
                >
                  Edit and resubmit
                </button>
              </div>
            </div>

            {view === 'logs' ? (
              <div className="[background:rgba(255,255,255,0.05)] w-full h-full p-2 rounded-md overflow-auto flex gap-2">
                <div className="tertiaryColor w-full h-full p-2 rounded-md overflow-auto">
                  <LoggingDisplay
                    data={executionLog || DUMMY_EXPLOIT_LOG}
                    parser={'exploit'}
                    extended={true}
                    filters={['success', 'info', 'error', 'undefined']}
                  />
                </div>

                <div className="tertiaryColor w-full h-full p-2 rounded-md overflow-auto">
                  <LoggingDisplay
                    data={
                      flagLog?.filter(
                        (submission) => submission.exploit_id === exploit.id
                      ) || DUMMY_FLAGSUBMISSION_LOG
                    }
                    parser={'submission'}
                    extended={true}
                    filters={Object.keys(FLAG_STATUS)}
                  />
                </div>
              </div>
            ) : (
              <div className="grid [grid-template-columns:1fr_20rem] gap-2 [background:rgba(255,255,255,0.05)] w-full h-full p-2 rounded-md overflow-auto">
                <div className="grid [grid-template-rows:1fr] gap-2">
                  <EditorComponent
                    value={stringConfig}
                    path={'json'}
                    theme="vs-dark"
                    onChange={onChange}
                    className={'rounded-sm'}
                  />
                  <button
                    className="primaryColor w-full h-full p-1 px-3 rounded-md transition-all hover:!bg-purple-500"
                    onClick={() => updateConfiguration()}
                  >
                    Update configuration
                  </button>
                </div>
                <div className="grid [grid-template-rows:1fr] gap-2 [background:rgba(255,255,255,0.05)] w-full h-full p-2 rounded-md overflow-auto">
                  <div className="h-full">
                    {Object.entries(scoreboardData?.teams || {}).map(
                      (team, index) => (
                        <button
                          key={index}
                          className={`text-left bg-purple-700 p-2 w-[calc(50%-0.5rem)] m-1 rounded-sm text-sm transition-all truncate cursor-default ${
                            configuration?.blacklist?.some(
                              (ips) => String(ips)?.split('.')[2] == team[0]
                            )
                              ? '!bg-red-300 !text-red-950'
                              : '!bg-green-300 !text-green-950'
                          }`}
                          onClick={() => {
                            console.log(team[0], team[1].name);
                          }}
                        >
                          {team[0]}. {team[1].name}
                        </button>
                      )
                    )}
                  </div>
                </div>
              </div>
            )}
          </>
        )}
      </div>
    </main>
  );
}

export default Exploits;
