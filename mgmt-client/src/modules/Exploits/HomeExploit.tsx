import LoggingDisplay from 'components/LoggingDisplay';
import { useAtom, useAtomValue } from 'jotai';
import { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import {
  exploitLogAtom,
  scoreboardDataAtom,
  submissionLogAtom,
} from 'utils/atoms';
import { DUMMY_EXPLOIT_LOG, DUMMY_FLAGSUBMISSION_LOG } from 'utils/constants';
import EditorComponent from '@monaco-editor/react';

const dummyExploit = [
  {
    id: 'da5f0e21e628e1d3',
    name: 'Exploit 1',
    configuration: `{
	"service": "httpchal1",
	"blacklist": ["10.1.2.1", "10.1.3.1"]
}`,
  },
  { id: 'fd705e8170d2241d', name: 'Exploit 2', configuration: '{}' },
  { id: 'bbbbbbbbbbbbbbbb', name: 'Exploit 3', configuration: '{}' },
];
function tryParseJSONObject(jsonString: string) {
  try {
    const o: unknown = JSON.parse(jsonString);
    if (o && typeof o === 'object') {
      return o;
    }
  } catch (e) {}
  return false;
}
function Exploits() {
  const _navigate = useNavigate(); // This line enables component re-render on navigation
  const [view, setView] = useState<'logs' | 'configuration'>('logs');
  const [submissionLog, _setSubmissionLog] = useAtom(submissionLogAtom);
  const scoreboardData = useAtomValue(scoreboardDataAtom);
  const [exploitLog, _setExploitLog] = useAtom(exploitLogAtom);
  const [exploits, setExploits] =
    useState<{ id: string; name: string; configuration: string }[]>(
      dummyExploit
    );

  const exploitId = location.hash.substring(1);
  const exploit = exploits.find((exploit) => exploit.id === exploitId);
  const configuration: { service: string; blacklist: string[] } =
    tryParseJSONObject(exploit?.configuration?.trim() || '{}')
      ? JSON.parse(exploit?.configuration?.trim() || '{}')
      : {};

  console.log(configuration);

  const startExploit = () => {
    fetch(`${import.meta.env.VITE_MGMT_SERVER_URL}/api/start/${exploitId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    })
      .then((res) => console.log(res))
      .catch((err) => console.log(err));
  };
  const stopExploit = () => {
    fetch(`${import.meta.env.VITE_MGMT_SERVER_URL}/api/stop/${exploitId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    })
      .then((res) => console.log(res))
      .catch((err) => console.log(err));
  };
  const updateConfiguration = () => {
    console.log('yoyo');
  };

  const onChange = (value: string | undefined, _event: unknown) => {
    if (!value) return;
    setExploits((exploits) =>
      exploits.map((exploit) => {
        if (exploit.id === exploitId)
          return { ...exploit, configuration: value };
        return exploit;
      })
    );
  };

  return (
    <main className="w-full h-full grid [grid-template-columns:20%_1fr] gap-3">
      <div className="tertiaryColor grid [grid-template-rows:3rem_1fr] w-full h-full p-2 rounded-md overflow-auto gap-3">
        <div className="p-2 [background:rgba(255,255,255,0.05)] rounded-md flex justify-between ">
          <h2 className="text-lg">Exploits</h2>

          <Link
            className="primaryColor p-1 px-3 rounded-sm transition-all hover:!bg-purple-500"
            to={'./new'}
          >
            Add new exploit
          </Link>
        </div>

        <div className="flex flex-col gap-3 p-2 [background:rgba(255,255,255,0.05)]">
          {exploits.map((exploit) => (
            <Link
              key={exploit.id}
              className="bg-purple-700 p-3 rounded-sm text-sm transition-all hover:!bg-purple-500"
              to={'#' + exploit.id}
            >
              {exploit.name}
            </Link>
          ))}
        </div>
      </div>

      <div className="tertiaryColor grid [grid-template-rows:3rem_1fr] w-full h-full p-2 rounded-md overflow-auto gap-3">
        {exploit && (
          <>
            <div className="flex gap-3 justify-between items-end [background:rgba(255,255,255,0.05)] w-full h-full p-2 rounded-md overflow-auto">
              <div className="flex gap-3 h-full">
                <button
                  className="primaryColor h-full w-36 p-1 px-3 rounded-sm transition-all hover:!bg-purple-500"
                  onClick={() => startExploit()}
                >
                  Start
                </button>
                <button
                  className="primaryColor h-full w-36 p-1 px-3 rounded-sm transition-all hover:!bg-purple-500"
                  onClick={() => stopExploit()}
                >
                  Stop
                </button>
                <h2 className="flex items-center text-lg">
                  {exploit.name} - (#{exploit.id})
                </h2>
              </div>

              <div className="flex gap-3">
                <button
                  className={`primaryColor p-1 px-3 rounded-sm transition-all hover:!bg-purple-500 ${
                    view === 'logs' ? '!bg-indigo-600 brightness-110' : ''
                  }`}
                  onClick={() => setView('logs')}
                >
                  View logs
                </button>
                <button
                  className={`primaryColor p-1 px-3 rounded-sm transition-all hover:!bg-purple-500 ${
                    view === 'configuration'
                      ? '!bg-indigo-600 brightness-110'
                      : ''
                  }`}
                  onClick={() => setView('configuration')}
                >
                  Configuration
                </button>
              </div>
            </div>

            {view === 'logs' ? (
              <div className="[background:rgba(255,255,255,0.05)] w-full h-full p-2 rounded-md overflow-auto flex gap-2">
                <div className="tertiaryColor w-full h-full p-2 rounded-md overflow-auto">
                  <LoggingDisplay
                    data={exploitLog || DUMMY_EXPLOIT_LOG}
                    parser={'exploit'}
                    extended={true}
                    filters={['success', 'info', 'error', 'undefined']}
                  />
                </div>

                <div className="tertiaryColor w-full h-full p-2 rounded-md overflow-auto">
                  <LoggingDisplay
                    data={
                      submissionLog?.filter(
                        (submission) => submission.exploit_id === exploit.id
                      ) || DUMMY_FLAGSUBMISSION_LOG
                    }
                    parser={'submission'}
                    extended={true}
                    filters={Object.keys(FLAG_STATUS)}
                  />
                </div>
              </div>
            ) : (
              <div className="grid [grid-template-columns:1fr_20rem] gap-2 [background:rgba(255,255,255,0.05)] w-full h-full p-2 rounded-md overflow-auto">
                <div>
                  <EditorComponent
                    value={exploit.configuration}
                    path={'json'}
                    theme="vs-dark"
                    onChange={onChange}
                    className={'rounded-sm'}
                  />
                </div>
                <div className="grid [grid-template-rows:1fr_3rem] gap-2 [background:rgba(255,255,255,0.05)] w-full h-full p-2 rounded-md overflow-auto">
                  <div className="">
                    {Object.entries(scoreboardData?.teams || {}).map(
                      (team, index) => (
                        <button
                          key={index}
                          className={`text-left bg-purple-700 p-2 w-[calc(50%-0.5rem)] m-1 rounded-sm text-sm transition-all hover:!bg-purple-500 truncate ${
                            configuration?.blacklist?.some(
                              (ips) => ips.split('.')[2] == team[0]
                            )
                              ? 'bg-red-300 text-red-950'
                              : 'bg-green-300 text-green-950'
                          }`}
                          onClick={() => {
                            console.log(team[0], team[1].name);
                          }}
                        >
                          {team[0]}. {team[1].name}
                        </button>
                      )
                    )}
                  </div>
                  <button
                    className="primaryColor w-full h-full p-1 px-3 rounded-md transition-all hover:!bg-purple-500"
                    onClick={() => updateConfiguration()}
                  >
                    Update configuration
                  </button>
                </div>
              </div>
            )}
          </>
        )}
      </div>
    </main>
  );
}

export default Exploits;
