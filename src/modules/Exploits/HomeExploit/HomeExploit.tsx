import LoggingDisplay from 'components/LoggingDisplay';
import { useAtom, useAtomValue } from 'jotai';
import { useEffect, useMemo, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import {
  executionLogAtom,
  exploitsAtom,
  scoreboardDataAtom,
  flagLogAtom,
  templatesAtom,
} from 'utils/atoms';
import {
  CONFIG,
  DUMMY_EXPLOIT_LOG,
  DUMMY_FLAGSUBMISSION_LOG,
  FLAG_CODE,
} from 'utils/constants';
import EditorComponent from '@monaco-editor/react';
import { FlagType } from 'utils/types';
import { useSnackbar } from 'notistack';
import parseTar from 'utils/tar/parseTar';
import SelectedExploitHeader from './SelectedExploit/SelectedExploitHeader';
import { downloadTemplate, getTemplate } from 'api/templates/getTemplateData';

function tryParseJSONObject(jsonString: string) {
  try {
    const o: unknown = JSON.parse(jsonString);
    if (o && typeof o === 'object') {
      return o;
    }
  } catch (e) {}
  return false;
}
function Exploits() {
  const [view, setView] = useState<'logs' | 'configuration'>('logs');
  const flagLog = useAtomValue(flagLogAtom);
  const executionLog = useAtomValue(executionLogAtom);
  const scoreboardData = useAtomValue(scoreboardDataAtom);
  const [exploits, _setExploits] = useAtom(exploitsAtom);
  const templates = useAtomValue(templatesAtom);
  const [stringConfig, setStringConfig] = useState('{}');

  const navigate = useNavigate();
  const { enqueueSnackbar } = useSnackbar();

  const exploitId = location.hash.substring(1);
  const exploit = useMemo(
    () => exploits?.find((exploit) => String(exploit.id) === exploitId),
    [exploits, exploitId]
  );
  const configuration: { service: string; blacklist: string[] } =
    tryParseJSONObject(stringConfig.trim() || '{}')
      ? JSON.parse(stringConfig.trim() || '{}')
      : {};

  // TODO: Angrepa currently doesn't support this
  const _updateConfiguration = () => {
    fetch(`${CONFIG.MGMT_SERVER_URL}/api/update_config/${exploitId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(configuration),
    })
      .then((res) => console.log(res))
      .catch((err) => console.log(err));
  };

  const addFromTemplate = async (template: string) => {
    const templateData = await getTemplate(template);
    if (!templateData) {
      enqueueSnackbar(`Template ${template} not found`, {
        variant: 'error',
        autoHideDuration: 5000,
      });
      return;
    }
    const files = await parseTar(templateData);
    navigate('/exploits/new', { state: { files: files } });
  };

  const onChange = (value: string | undefined, _event: unknown) => {
    if (!value) return;
    setStringConfig(value);
  };

  // TODO: Exploits still gets refreshed, bigrip. Have to actually fix this.
  useEffect(() => {
    if (!exploitId) return;
    setStringConfig((_config) => {
      const currentExploit = exploits?.find((e) => String(e.id) === exploitId);
      if (!currentExploit) return '{}';
      return JSON.stringify(
        {
          name: currentExploit.name,
          service: currentExploit.service,
          blacklist: currentExploit.blacklist,
          pool_size: currentExploit.pool_size,
        },
        null,
        2
      );
    });
  }, [exploitId, exploits?.length]);

  return (
    <main className="w-full h-full grid [grid-template-columns:20%_1fr] gap-3">
      <div className="tertiaryColor flex flex-col w-full h-full p-2 rounded-md overflow-auto gap-3">
        <div className="grid grid-cols-2 gap-2 items-center p-2 [background:rgba(255,255,255,0.05)] rounded-md">
          <h2 className="text-lg">Exploits</h2>

          <Link
            className="primaryColor text-center truncate p-1 px-3 rounded-sm transition-all hover:!bg-purple-500"
            to={'./new'}
          >
            Add exploit
          </Link>
        </div>
        <div className="flex gap-2 items-center p-2 [background:rgba(255,255,255,0.05)] rounded-md">
          <div className="w-full">
            {templates &&
              templates.map((template, i) => (
                <div key={i} className="">
                  <h3 className="text-md col-span-2">Template {template}:</h3>
                  <div className="flex gap-2">
                    <button
                      className="primaryColor text-center truncate p-1 px-3 rounded-sm transition-all hover:!bg-purple-500"
                      onClick={() => addFromTemplate(template)}
                    >
                      Add from template
                    </button>
                    <button
                      className="primaryColor text-center truncate p-1 px-3 rounded-sm transition-all hover:!bg-purple-500"
                      onClick={() => downloadTemplate(template)}
                    >
                      Download template
                    </button>
                  </div>
                </div>
              ))}
          </div>
        </div>

        <div className="h-full flex flex-col gap-3 p-2 [background:rgba(255,255,255,0.05)] overflow-auto rounded-md">
          {exploits !== null ? (
            exploits.map((exploit) => (
              <Link
                key={exploit.id}
                className={`relative flex justify-between bg-purple-700 p-3 rounded-sm text-sm transition-all hover:!bg-purple-500 ${
                  String(exploit.id) === exploitId
                    ? '!bg-indigo-600 brightness-110'
                    : ''
                }`}
                to={'#' + String(exploit.id)}
              >
                [{exploit.id}] {exploit.name}
                <div
                  className={`absolute rounded-full right-3 top-1/2 -translate-y-1/2 w-2 h-2 ${
                    exploit.enabled ? 'bg-green-400' : 'bg-red-400'
                  }`}
                ></div>
              </Link>
            ))
          ) : (
            <></>
          )}
        </div>
      </div>

      <div className="tertiaryColor grid [grid-template-rows:3rem_1fr] w-full h-[calc(100vh-5rem)] p-2 rounded-md overflow-auto gap-3">
        {exploit && (
          <>
            <SelectedExploitHeader
              exploit={exploit}
              configuration={configuration}
              view={view}
              setView={setView}
            />

            {view === 'logs' ? (
              <div className="[background:rgba(255,255,255,0.05)] w-full h-full p-2 rounded-md overflow-auto flex gap-2">
                <div className="tertiaryColor w-full h-full p-2 rounded-md overflow-auto">
                  <LoggingDisplay
                    data={
                      executionLog?.filter(
                        (exec) => exec.exploit_id === exploit.id
                      ) || DUMMY_EXPLOIT_LOG
                    }
                    parser={'exploit'}
                    extended={true}
                    filters={['0', '1', '2', '3']}
                  />
                </div>

                <div className="tertiaryColor w-full h-full p-2 rounded-md overflow-auto">
                  <LoggingDisplay
                    data={
                      flagLog?.filter(
                        (flag) => flag.exploit_id === exploit.id
                      ) || (DUMMY_FLAGSUBMISSION_LOG as FlagType[])
                    }
                    parser={'submission'}
                    extended={true}
                    filters={Object.keys(FLAG_CODE)}
                    showService={false}
                  />
                </div>
              </div>
            ) : (
              <div className="grid [grid-template-columns:1fr_20rem] gap-2 [background:rgba(255,255,255,0.05)] w-full h-full p-2 rounded-md overflow-auto">
                <div className="grid [grid-template-rows:1fr] gap-2">
                  <EditorComponent
                    value={stringConfig}
                    path={'json'}
                    theme="vs-dark"
                    onChange={onChange}
                    className={'rounded-sm'}
                  />
                  {/*
                  <button
                    className="primaryColor w-full h-full p-1 px-3 rounded-md transition-all hover:!bg-purple-500"
                    onClick={() => updateConfiguration()}
                  >
                    Update configuration
                  </button>
                  */}
                </div>
                <div className="grid [grid-template-rows:1fr] gap-2 [background:rgba(255,255,255,0.05)] w-full h-full p-2 rounded-md overflow-auto">
                  <div className="h-full">
                    {Object.entries(scoreboardData?.teams || {}).map(
                      (team, index) => (
                        <button
                          key={index}
                          className={`text-left bg-purple-700 p-2 w-[calc(50%-0.5rem)] m-1 rounded-sm text-sm transition-all truncate cursor-default ${
                            configuration?.blacklist?.some(
                              (ips) => String(ips)?.split('.')[2] == team[0]
                            )
                              ? '!bg-red-300 !text-red-950'
                              : '!bg-green-300 !text-green-950'
                          }`}
                          onClick={() => {
                            console.log(team[0], team[1].name);
                          }}
                        >
                          {team[0]}. {team[1].name}
                        </button>
                      )
                    )}
                  </div>
                </div>
              </div>
            )}
          </>
        )}
      </div>
    </main>
  );
}

export default Exploits;
