import { CallSplit, Download } from '@mui/icons-material';
import { useSnackbar } from 'notistack';
import { Dispatch, SetStateAction } from 'react';
import { useNavigate } from 'react-router-dom';
import { CONFIG } from 'utils/constants';
import generateTar from 'utils/tar/generateTar';
import parseTar from 'utils/tar/parseTar';
import { ExploitType } from 'utils/types';
import { File } from 'utils/types';

type SelectedExploitHeaderProps = {
  exploit: ExploitType;
  configuration: { service: string; blacklist: string[] };
  view: 'logs' | 'configuration';
  setView: Dispatch<SetStateAction<'logs' | 'configuration'>>;
};
const SelectedExploitHeader = ({
  exploit,
  configuration,
  view,
  setView,
}: SelectedExploitHeaderProps) => {
  const navigate = useNavigate();
  const { enqueueSnackbar } = useSnackbar();

  const startExploit = () => {
    fetch(`${CONFIG.MGMT_SERVER_URL}/exploit/start/${exploit.id}`)
      .then((res) => {
        console.log(res);
        enqueueSnackbar(
          `Successfully started the exploit with id ${exploit.id}`,
          {
            variant: 'success',
            autoHideDuration: 5000,
          }
        );
      })
      .catch((err) => {
        console.log(err);
        enqueueSnackbar(
          `Got this error from the server when trying to start the exploit: ${String(
            err
          )}`,
          {
            variant: 'error',
            autoHideDuration: 5000,
          }
        );
      });
  };

  const stopExploit = () => {
    fetch(`${CONFIG.MGMT_SERVER_URL}/exploit/stop/${exploit.id}`)
      .then((res) => {
        console.log(res);
        enqueueSnackbar(
          `Successfully stopped the exploit with id ${exploit.id}`,
          {
            variant: 'success',
            autoHideDuration: 5000,
          }
        );
      })
      .catch((err) => {
        console.log(err);
        enqueueSnackbar(
          `Got this error from the server when trying to stop the exploit: ${String(
            err
          )}`,
          {
            variant: 'error',
            autoHideDuration: 5000,
          }
        );
      });
  };

  const textEncoder = new TextEncoder();
  const editAndResubmit = async () => {
    const res = await fetch(
      `${CONFIG.MGMT_SERVER_URL}/exploit/download/${exploit.id}`
    );
    const buffer = await res.arrayBuffer();
    let files: File[] = [
      {
        name: 'config.json',
        data: textEncoder.encode(JSON.stringify(configuration, null, 2)),
      },
    ];
    if (buffer) files = files.concat(await parseTar(buffer));
    console.log(files);
    navigate('/exploits/new', { state: { files: files } });
  };

  const downloadExploit = async () => {
    const res = await fetch(
      `${CONFIG.MGMT_SERVER_URL}/exploit/download/${exploit.id}`
    );
    const buffer = await res.arrayBuffer();
    if (!buffer) {
      enqueueSnackbar(`Could not download exploit ${exploit.id}`, {
        variant: 'error',
        autoHideDuration: 5000,
      });
      return;
    }
    const files = await parseTar(buffer);
    console.log(files);
    if (!files.find((file) => file.name === 'config.json'))
      files.push({
        name: 'config.json',
        data: textEncoder.encode(JSON.stringify(configuration, null, 2)),
      });
    const tar = await generateTar(files);
    const blob = new Blob([tar], { type: 'application/tar' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${exploit.name}.tar`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="flex gap-3 justify-between items-end [background:rgba(255,255,255,0.05)] w-full h-full p-2 rounded-md overflow-auto text-sm">
      <div className="flex gap-2">
        <button
          className={`primaryColor h-full w-24 p-1 px-3 rounded-sm transition-all hover:!bg-purple-500 ${
            exploit.enabled ? 'grayscale-[1] cursor-not-allowed' : ''
          }`}
          onClick={() => !exploit.enabled && startExploit()}
        >
          Start
        </button>
        <button
          className={`primaryColor h-full w-24 p-1 px-3 rounded-sm transition-all hover:!bg-purple-500 ${
            !exploit.enabled ? 'grayscale-[1] cursor-not-allowed' : ''
          }`}
          onClick={() => exploit.enabled && stopExploit()}
        >
          Stop
        </button>
        <h2 className="flex items-center text-md truncate">
          [{exploit.id}][{exploit.service}] {exploit.name}
        </h2>
      </div>

      <div className="flex gap-2">
        <button
          className={`primaryColor p-1 px-3 rounded-sm truncate transition-all hover:!bg-purple-500 ${
            view === 'logs' ? '!bg-indigo-600 brightness-110' : ''
          }`}
          onClick={() => setView('logs')}
        >
          View logs
        </button>
        <button
          className={`primaryColor p-1 px-3 rounded-sm truncate transition-all hover:!bg-purple-500 ${
            view === 'configuration' ? '!bg-indigo-600 brightness-110' : ''
          }`}
          onClick={() => setView('configuration')}
        >
          Configuration
        </button>
        <button
          className={`primaryColor p-1 px-3 rounded-sm truncate transition-all hover:!bg-purple-500`}
          onClick={downloadExploit}
          title={'Download exploit'}
        >
          <Download fontSize="inherit" className="translate-y-[1px]" />
        </button>
        <button
          className={`primaryColor p-1 px-3 rounded-sm truncate transition-all hover:!bg-purple-500`}
          onClick={editAndResubmit}
          title={'Edit and resubmit'}
        >
          <CallSplit fontSize="inherit" className="translate-y-[1px]" />
        </button>
      </div>
    </div>
  );
};
export default SelectedExploitHeader;
