import {
  CloudUpload,
  DeleteOutline,
  Download,
  KeyboardBackspace,
} from '@mui/icons-material';
import Uploader from './Uploader';
import { useNavigate } from 'react-router-dom';
import useFiles from 'utils/useFiles';
import { Exploit } from 'utils/types';
import sendExploit from 'api/exploits/sendExploit';
import { SnackbarKey, useSnackbar } from 'notistack';
import { useState } from 'react';

export default function NewExploitHeader() {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const { currentFiles, clearFiles, downloadFiles } = useFiles();
  const { enqueueSnackbar, closeSnackbar } = useSnackbar();

  const uploadExploit = async () => {
    setLoading(true);
    if (!confirm('Are you sure you want to upload this exploit?')) return;
    const exploit = {
      files: currentFiles,
      id: 1,
      teams: [],
      service: 'test',
    } as Exploit;
    try {
      const res = (await sendExploit(exploit)) as { id: number; error: string };
      if (res.id) {
        const success: SnackbarKey = enqueueSnackbar(
          `Successfully uploaded exploit with id ${res.id}`,
          {
            variant: 'success',
            autoHideDuration: 10000,
            SnackbarProps: {
              onClick: () => closeSnackbar(success),
            },
          }
        );
        navigate('/exploits');
      } else {
        const error: SnackbarKey = enqueueSnackbar(
          `Got this error from the server when trying to upload: ${
            res?.error ?? JSON.stringify(res)
          }`,
          {
            variant: 'error',
            autoHideDuration: 10000,
            SnackbarProps: {
              onClick: () => closeSnackbar(error),
            },
          }
        );
      }
    } catch (e) {
      const error: SnackbarKey = enqueueSnackbar(
        `Got this error when trying to upload: ${String(e)}`,
        {
          variant: 'error',
          autoHideDuration: 10000,
          SnackbarProps: {
            onClick: () => closeSnackbar(error),
          },
        }
      );
    } finally {
      setLoading(false);
    }
  };

  const deleteAll = () => {
    if (confirm('Are you sure you want to delete all files?')) clearFiles();
  };

  return (
    <div className="w-full h-full grid gap-3 p-2 items-center [grid-template-columns:1fr_4fr_1fr_1fr_1fr] col-span-3 tertiaryColor rounded-md">
      <button
        className="flex items-center justify-center gap-2 primaryColor text-center truncate p-1 px-3 rounded-sm transition-all hover:!bg-purple-500"
        onClick={() => {
          if (
            !confirm(
              'Are you sure you want to go back?\nYour files will be discarded.'
            )
          )
            return;
          navigate('/exploits');
        }}
      >
        <KeyboardBackspace fontSize="small" />
        <p>Go back</p>
      </button>

      <Uploader className="!min-h-0 h-[2rem] [&_.MuiTypography-root]:[margin-top:4px] [&_.MuiTypography-root]:text-sm" />

      <button
        className="flex items-center justify-center gap-2 primaryColor text-center truncate p-1 px-3 rounded-sm transition-all hover:!bg-purple-500"
        onClick={downloadFiles}
      >
        <Download fontSize="small" />
        <p className="text-center">Download files</p>
      </button>

      <button
        className="flex items-center justify-center gap-2 primaryColor text-center truncate p-1 px-3 rounded-sm transition-all hover:!bg-purple-500"
        onClick={deleteAll}
      >
        <DeleteOutline fontSize="small" />
        <p className="text-center">Delete all</p>
      </button>

      <button
        className={`flex items-center justify-center gap-2 primaryColor text-center truncate p-1 px-3 rounded-sm transition-all ${
          loading ? 'cursor-not-allowed !grayscale-[1]' : 'hover:!bg-purple-500'
        }`}
        disabled={loading}
        onClick={uploadExploit}
      >
        {loading ? (
          <svg
            className="animate-spin -ml-1 h-5 w-5 text-white"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              className="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              stroke-width="4"
            ></circle>
            <path
              className="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
        ) : (
          <CloudUpload fontSize="small" />
        )}
        <p className="text-center">Upload exploit</p>
      </button>
    </div>
  );
}
